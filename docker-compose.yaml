version: "3.9"

services:
  app:
    build: .
    image: finance-tracker-backend-image
    ports:
      - "8000:8000"
    volumes:
      - ./:/app/
      - empty_venv:/app/.venv
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:17.4-alpine3.21
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5439:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${DB_NAME}", "-U", "${DB_USER}" ]
      interval: 1s
      timeout: 3s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  celery:
    image: finance-tracker-backend-image
    depends_on:
      - postgres
      - redis
    command: "uv run celery -A finance_tracker worker --loglevel=info --logfile=celery_worker.log"
    volumes:
      - ./:/app/
      - empty_venv:/app/.venv
    env_file:
      - .env

  celery-beat:
    image: finance-tracker-backend-image
    container_name: finance-tracker-celery-beat
    depends_on:
      - postgres
      - redis
    command: "uv run celery -A finance_tracker beat --loglevel=info --logfile=celery_beat.log --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - ./:/app/
      - empty_venv:/app/.venv
    env_file: .env

  flower:
    image: finance-tracker-backend-image
    container_name: flower
    command: "uv run celery -A finance_tracker flower"
    ports:
      - "5555:5555"
    env_file: .env
    volumes:
      - ./:/app/
      - empty_venv:/app/.venv
    depends_on:
      - celery-beat
      - redis
      - celery

volumes:
  postgres_data:
  empty_venv:

networks:
  default:
